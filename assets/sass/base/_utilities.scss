// Center block element
//
// make sure $size-content-max is declared
// $size-default-width set in /assets/scss/base/_variables.scss
//
// @param {string} $max - maximum width for block element
@mixin center($max: $size-default-width) {
	display: block;
	margin-left: auto;
	margin-right: auto;
	max-width: $max;
	width: 100%;
}

// Describe all psuedo state classes
@mixin hover {
	&:active, &:focus, &:hover {
		@content;
	}
}

// Rem output with px fallback
//
// Necessary if supporting < IE9, and recommended if supporting < IE11
// Uses rem-calc from Foundation and adds pixel fallback.
// Can be used for any property, defaults to font-size
//
// @param {int} $value - pixel value of element size
// @param {string} $property - css property
// @param {string} $base-value - base pixel value for rem conversion
// @requires $value
@mixin rem-fallback($value, $property: 'font-size', $base-value: $rem-base){
	#{$property}: $value + px;
	#{$property}: rem-calc($value, $base-value: $rem-base);
}

// Reset our ul/ol lists
@mixin reset-list {
	list-style: none;
	margin-left: 0;
	margin-bottom: 0;
}

// z-index management
$layers: (
	nav: 1,
	header: 2
);

@mixin z-index($layer-name) {
  z-index: map-get($layers, $layer-name);
};

// Screen reader
@mixin screen-reader-text {
	position: absolute;
	top: -9999px;
	left: -9999px;
}

// Helper class in case we need to use it via our markup
.screen-reader-text {
	@include screen-reader-text;
}

@mixin section-spacing {
	padding-bottom: 1rem;
	padding-top: 1rem;
	@include breakpoint(medium) {
		padding-bottom: 3rem;
		padding-top: 3rem;
	}
}

@mixin box-shadow-hover {
	box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  	transition: all 0.3s cubic-bezier(.25,.8,.25,1);
  	@include hover {
		box-shadow: 0 14px 28px rgba(0,0,0,0.2), 0 7px 7px rgba(0,0,0,0.2);
	}
}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}
